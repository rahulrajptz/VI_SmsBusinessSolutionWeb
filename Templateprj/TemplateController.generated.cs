// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Templateprj.Controllers
{
    public partial class TemplateController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected TemplateController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddTemplates()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddTemplates);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult GetTemplates()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetTemplates);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public TemplateController Actions { get { return MVC.Template; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Template";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Template";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Templates = "Templates";
            public readonly string AddTemplates = "AddTemplates";
            public readonly string GetTemplateNames = "GetTemplateNames";
            public readonly string GetTemplates = "GetTemplates";
            public readonly string UploadTemplate = "UploadTemplate";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Templates = "Templates";
            public const string AddTemplates = "AddTemplates";
            public const string GetTemplateNames = "GetTemplateNames";
            public const string GetTemplates = "GetTemplates";
            public const string UploadTemplate = "UploadTemplate";
        }


        static readonly ActionParamsClass_AddTemplates s_params_AddTemplates = new ActionParamsClass_AddTemplates();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddTemplates AddTemplatesParams { get { return s_params_AddTemplates; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddTemplates
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Templates s_params_Templates = new ActionParamsClass_Templates();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Templates TemplatesParams { get { return s_params_Templates; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Templates
        {
            public readonly string command = "command";
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_GetTemplates s_params_GetTemplates = new ActionParamsClass_GetTemplates();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetTemplates GetTemplatesParams { get { return s_params_GetTemplates; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetTemplates
        {
            public readonly string model = "model";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_TemplateController : Templateprj.Controllers.TemplateController
    {
        public T4MVC_TemplateController() : base(Dummy.Instance) { }

        [NonAction]
        partial void TemplatesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Templates()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Templates);
            TemplatesOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddTemplatesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddTemplates(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddTemplates);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AddTemplatesOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void TemplatesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Templateprj.Models.Managements.RegisterTemplateCommand command);

        [NonAction]
        public override System.Web.Mvc.ActionResult Templates(Templateprj.Models.Managements.RegisterTemplateCommand command)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Templates);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "command", command);
            TemplatesOverride(callInfo, command);
            return callInfo;
        }

        [NonAction]
        partial void TemplatesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Templateprj.Models.Managements.UpdateTemplateCommand command);

        [NonAction]
        public override System.Web.Mvc.ActionResult Templates(Templateprj.Models.Managements.UpdateTemplateCommand command)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Templates);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "command", command);
            TemplatesOverride(callInfo, command);
            return callInfo;
        }

        [NonAction]
        partial void TemplatesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Templates(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Templates);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            TemplatesOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void GetTemplateNamesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetTemplateNames()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetTemplateNames);
            GetTemplateNamesOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void GetTemplatesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Templateprj.Models.Managements.TemplateModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetTemplates(Templateprj.Models.Managements.TemplateModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetTemplates);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            GetTemplatesOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void UploadTemplateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult UploadTemplate()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UploadTemplate);
            UploadTemplateOverride(callInfo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
