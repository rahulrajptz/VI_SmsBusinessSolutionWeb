@model Templateprj.Models.ProjectTracker
@{
    ViewBag.ActLink = ViewBag.Title = "ProjectTracker";
}
@if (Session["RoleID"].ToString() == "1")
{
    <link href="~/Content/animate.css" rel="stylesheet" />
    <div class="row">
        <div class="col s12">
            <div class="card animated slideInLeft">
                <div class="card-header ">
                    <h4 class="card-title">ProjectTracker</h4>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm(MVC.Incident.ProjectTracker(), FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        <div class="row">
                            <div class="form-group col s3">
                                @Html.Label("Circle", new { })
                                @Html.DropDownListFor(m => m.Circle, Model.CircleList, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.Label("Project Name", new { })
                                @Html.TextBoxFor(m => m.ProjectName, new { @class = "form-control", type = "text" })
                            </div>
                            <div class="form-group col s3">
                                @Html.Label("ProjectRecipientDate", new { })
                                @Html.TextBoxFor(m => m.ProjectRecipientDate, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.Label("RDN", new { })
                                @Html.TextBoxFor(m => m.RDN, new { @class = "form-control", type = "text", @onkeypress = "return ((event.charCode >= 48 && event.charCode <= 57) ||  event.which == 8)", @minLength = 10, @maxLength = 10 })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col s3">
                               @Html.LabelFor(m => m.TFN, new { })
                                @Html.TextBoxFor(m => m.TFN, new { @class = "form-control", type = "text", @onkeypress = "return (event.charCode >= 48 && event.charCode <= 57|| event.which == 8)", @minLength = 10, @maxLength = 11 })
                            </div>
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.IMSI, new { })
                                @Html.TextBoxFor(m => m.IMSI, new { @class = "form-control", type = "text", @onkeypress = "return (event.charCode >= 48 && event.charCode <= 57|| event.which == 8)", @minLength = 15, @maxLength = 16 })
                            </div>
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.RfpStatus, new { })
                                @Html.DropDownListFor(m => m.RfpStatus, Model.RfpStatusList, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.CustomerSpoc, new { })
                                @Html.TextBoxFor(m => m.CustomerSpoc, new { @class = "form-control", type = "text" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.CustomerEmail, new { })
                                @Html.TextBoxFor(m => m.CustomerEmail, new { @class = "form-control", type = "text" })
                            </div>
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.CustomerNumber, new { })
                                @Html.TextBoxFor(m => m.CustomerNumber, new { @class = "form-control", type = "text", @onkeypress = "return (event.charCode >= 48 && event.charCode <= 57|| event.which == 8)", @minLength = 10, @maxLength = 10 })
                            </div>
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.IdeaSpoc, new { })
                                @Html.TextBoxFor(m => m.IdeaSpoc, new { @class = "form-control", type = "text" })
                            </div>
                            <div class="form-group col s3">
                                @Html.Label("Request From Name", new { })
                                @Html.TextBoxFor(m => m.RequestFrom, new { @class = "form-control", type = "text" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.TypeOfSolution, new { })
                                @Html.DropDownListFor(m => m.TypeOfSolution, Model.TypeOfSolutionList, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.InternalUat, new { })
                                @Html.DropDownListFor(m => m.InternalUat, Model.InternalUatList, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.Label("Internal UAT Result", new { })
                                @Html.DropDownListFor(m => m.InternalUatresult, Model.InternalUatresultList, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.Label("ETD CommitDate", new { })
                                @Html.TextBoxFor(m => m.EIDCommitDate, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.AppConfigDate, new { })
                                @Html.TextBoxFor(m => m.AppConfigDate, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.MSCConfigDate, new { })
                                @Html.TextBoxFor(m => m.MSCConfigDate, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.ProjectCompletionDate, new { })
                                @Html.TextBoxFor(m => m.ProjectCompletionDate, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.DateWelcomeEmail, new { })
                                @Html.TextBoxFor(m => m.DateWelcomeEmail, new { @class = "form-control", type = "text", @onkeypress = "return (event.charCode >= 48 && event.charCode <= 57|| event.which == 8)" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col s3">
                                @Html.LabelFor(m => m.RerecipientofRfp, new { })
                                @Html.TextBoxFor(m => m.RerecipientofRfp, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.Label("Pending Reason", new { })
                                @Html.TextBoxFor(m => m.Remarks, new { @class = "form-control", type = "text" })
                            </div>
                            <div class="form-group col s3">
                                @Html.Label("Current Status", new { })
                                @Html.DropDownListFor(m => m.Status, Model.StatusList, new { @class = "form-control" })
                            </div>
                            <div class="form-group col s3">
                                @Html.Label("Other Remarks", new { })
                                @Html.TextBoxFor(m => m.OtherRemarks, new { @class = "form-control", type = "text" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group ">
                                <span class="form-check-sign"></span>
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input class="form-check-input" type="checkbox" value="true" checked>
                                        <span class="form-check-sign"></span>
                                        Check For History
                                    </label>
                                </div>
                            </div>
                            <div class="form-group col s3">                            
                                    <button id="btn_show" class="btn btn-primary not-close float-right" type="submit" name="action">
                                        Submit
                                    </button>
                                </div>                              
                            </div>
                        
                    }
                </div>
            </div>
        </div>
    </div>
}

@section scripts {

    <script>
        $('#RDN').focusout(function () {
            var rdn = $('#RDN').val();

            if (rdn.length != 10) {
                $('#ProjectName').val($('#ProjectName').val());
                $('#TFN').val($('#TFN').val());
            }
            else {
                $.ajax({
                    url: "Incident/RdnGetDetails",
                    type: "Get",
                    dataType: "json",
                    data: { RdnNum: rdn },
                    success: function (data) {
                        var t = JSON.parse(data)
                        if (t[0]['STATUS'] == "1") {
                            alert("RDN already exists")
                            $('#ProjectName').val(t[0]['PROJECT_NAME']);
                            $('#RDN').val(t[0]['RDN']);
                            $('#TFN').val(t[0]['TFN']);
                        }
                        else if (t[0]['STATUS'] == "0") {
                            $('#ProjectName').val($('#ProjectName').val());
                            $('#TFN').val($('#TFN').val());
                            $('#RDN').val(rdn);
                        }
                    }
                })
            }
        });//Rdn change fill TFN PROJECT NAME
        $(function () {
            $("#RDN").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.ajax({
                        url: "Incident/RdnAutofill",
                        type: "POST",
                        dataType: "json",
                        data: { Rdn: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item };
                            }))

                        }
                    })
                },
                messages: {
                    noResults: "",
                    results: function (count) {
                        return count + (count > 1 ? ' results' : ' result ') + ' found';
                    }
                }
            });
        });//Autofill RDN

        $('#btn_show').click(function (ev) {
            var valid = true;
            if ($("#Status").val() == "1" && $("#Remarks").val() == "")
            {
                valid = false;
                $("#Remarks").addClass('form-control input-validation-error');
                $("#Remarks").focus();
            }
            else
            {

                valid = true;
            }
            if (!valid) {
                ev.preventDefault();
            }
        });//Custom validation for Pending reason
        $(document).ready(function () {
            $("#ProjectRecipientDate").flatpickr({ "maxDate": "today" });
            //$("#EIDCommitDate").flatpickr({ "maxDate": "today",minDate: Dates() });
            //$("#AppConfigDate").flatpickr({ "maxDate": "today" });
            //$("#MSCConfigDate").flatpickr({ "maxDate": "today" });
            //$("#ProjectCompletionDate").flatpickr({ "maxDate": "today"});
            //$("#DateWelcomeEmail").flatpickr({ "maxDate": "today" });
            //$("#RerecipientofRfp").flatpickr({ "maxDate": "today" });

            $("#EIDCommitDate").prop('disabled', true);
            $("#AppConfigDate").prop('disabled', true);
            $("#MSCConfigDate").prop('disabled', true);
            $("#ProjectCompletionDate").prop('disabled', true);
            $("#DateWelcomeEmail").prop('disabled', true);
            $("#RerecipientofRfp").prop('disabled', true);

            if ($("#ProjectRecipientDate").val() != "") {
                var dates = $("#ProjectRecipientDate").val();
                $("#EIDCommitDate").prop('disabled', false);
                $("#AppConfigDate").prop('disabled', false);
                $("#MSCConfigDate").prop('disabled', false);
                $("#ProjectCompletionDate").prop('disabled', false);
                $("#DateWelcomeEmail").prop('disabled', false);
                $("#RerecipientofRfp").prop('disabled', false);


                $("#EIDCommitDate").flatpickr({  minDate: dates });
                $("#RerecipientofRfp").flatpickr({ "maxDate": "today", minDate: dates });
                $("#AppConfigDate").flatpickr({ "maxDate": "today", minDate: dates });
                $("#DateWelcomeEmail").flatpickr({ "maxDate": "today", minDate: dates });
                $("#MSCConfigDate").flatpickr({ "maxDate": "today", minDate: dates });
                $("#ProjectCompletionDate").flatpickr({ "maxDate": "today", minDate: dates });
                $("#RerecipientofRfp").flatpickr({ "maxDate": "today", minDate: dates });
                $("#ProjectRecipientDate").prop('disabled', true);
            }//For Editing enabling flatpickr



                if ($("#Status").val() == "2") {
                    $("#Remarks").prop('disabled', true);
                    $("#Remarks").val("")
                }

        });

        $("#ProjectRecipientDate").change(function () {
            if ($("#ProjectRecipientDate").val() != null) {
                $("#EIDCommitDate").prop('disabled', false);
                $("#AppConfigDate").prop('disabled', false);
                $("#MSCConfigDate").prop('disabled', false);
                $("#ProjectCompletionDate").prop('disabled', false);
                $("#DateWelcomeEmail").prop('disabled', false);
                $("#RerecipientofRfp").prop('disabled', false);

                var dates = $("#ProjectRecipientDate").val();

                $("#EIDCommitDate").flatpickr({  minDate: dates  });
                $("#RerecipientofRfp").flatpickr({ "maxDate": "today", minDate: dates });
                $("#AppConfigDate").flatpickr({ "maxDate": "today", minDate: dates });
                $("#DateWelcomeEmail").flatpickr({ "maxDate": "today", minDate: dates });
                $("#MSCConfigDate").flatpickr({ "maxDate": "today", minDate: dates });
                $("#ProjectCompletionDate").flatpickr({ "maxDate": "today", minDate: dates });
                $("#RerecipientofRfp").flatpickr({ "maxDate": "today", minDate: dates });

            }
        });//After Changing PROJECT RECIPIENT DATE then limit other calender control values
        $("#DateWelcomeEmail").change(function () {
            if ($("#DateWelcomeEmail").val() != null)
            {
                $("#ProjectCompletionDate").prop('disabled', false);
                var datewel = $("#DateWelcomeEmail").val();
                $("#ProjectCompletionDate").flatpickr({ "maxDate": "today", defaultDate: [datewel] });
            }
        });//Date WelcomeEmail set the == Project Completion Date
        $("#Status").change(function () {
            $("#Remarks").prop('disabled', false);
            if ($("#Status").val() == "2") {
                $("#Remarks").val("");
                $("#Remarks").prop('disabled', true);
            }
        });

        toastr.options = {
            "closeButton": false,
            "debug": true,
            "newestOnTop": false,
            "progressBar": true,
            "positionClass": "toast-bottom-full-width",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };

        if ('@ViewBag.Success' == "1") {
                toastr.success('Success...');
            }
            else if('@ViewBag.Failed' == "2") {
                toastr.error('Error');
            }

    </script>
}
